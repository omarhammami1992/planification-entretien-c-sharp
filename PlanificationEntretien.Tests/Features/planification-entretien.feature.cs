// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PlanificationEntretien.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PlanifierUnEntretienDeRecrutementChezSoatFeature : object, Xunit.IClassFixture<PlanifierUnEntretienDeRecrutementChezSoatFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "planification-entretien.feature"
#line hidden
        
        public PlanifierUnEntretienDeRecrutementChezSoatFeature(PlanifierUnEntretienDeRecrutementChezSoatFeature.FixtureData fixtureData, PlanificationEntretien_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr"), "Features", "Planifier un entretien de recrutement chez Soat", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Recruteur peut tester le candidat")]
        [Xunit.TraitAttribute("FeatureTitle", "Planifier un entretien de recrutement chez Soat")]
        [Xunit.TraitAttribute("Description", "Recruteur peut tester le candidat")]
        public virtual void RecruteurPeutTesterLeCandidat()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recruteur peut tester le candidat", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    testRunner.Given("un candidat \"Java\" (\"candidat@email.com\") avec \"2\" ans d’expériences qui est disp" +
                        "onible \"15/04/2019\" à \"15:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Etant donné ");
#line hidden
#line 6
    testRunner.And("un recruteur \"Java\" (\"recruteur@soat.fr\") qui a \"6\" ans d’XP qui est dispo \"15/04" +
                        "/2019\" à \"15:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et qu\'");
#line hidden
#line 7
    testRunner.When("on tente une planification d’entretien", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 8
    testRunner.Then("L’entretien est planifié", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 9
    testRunner.And("un mail de confirmation est envoyé au candidat et le recruteur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Recruteur ne peut pas tester le candidat car les dates ne correspondent pas")]
        [Xunit.TraitAttribute("FeatureTitle", "Planifier un entretien de recrutement chez Soat")]
        [Xunit.TraitAttribute("Description", "Recruteur ne peut pas tester le candidat car les dates ne correspondent pas")]
        public virtual void RecruteurNePeutPasTesterLeCandidatCarLesDatesNeCorrespondentPas()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recruteur ne peut pas tester le candidat car les dates ne correspondent pas", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
    testRunner.Given("un candidat \"Java\" (\"candidat@email.com\") avec \"2\" ans d’expériences qui est disp" +
                        "onible \"16/04/2019\" à \"15:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Etant donné ");
#line hidden
#line 13
    testRunner.And("un recruteur \"Java\" (\"recruteur@soat.fr\") qui a \"6\" ans d’XP qui est dispo \"15/04" +
                        "/2019\" à \"15:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et qu\'");
#line hidden
#line 14
    testRunner.When("on tente une planification d’entretien", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 15
    testRunner.Then("L’entretien n\'est pas planifié", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 16
    testRunner.And("aucun mail de confirmation est envoyé au candidat ou au recruteur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Recruteur ne peut pas tester le candidat car leur techno ne correspondent pas")]
        [Xunit.TraitAttribute("FeatureTitle", "Planifier un entretien de recrutement chez Soat")]
        [Xunit.TraitAttribute("Description", "Recruteur ne peut pas tester le candidat car leur techno ne correspondent pas")]
        public virtual void RecruteurNePeutPasTesterLeCandidatCarLeurTechnoNeCorrespondentPas()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recruteur ne peut pas tester le candidat car leur techno ne correspondent pas", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 18
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
    testRunner.Given("un candidat \"C#\" (\"candidat@email.com\") avec \"2\" ans d’expériences qui est dispon" +
                        "ible \"16/04/2019\" à \"15:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Etant donné ");
#line hidden
#line 20
    testRunner.And("un recruteur \"Java\" (\"recruteur@soat.fr\") qui a \"6\" ans d’XP qui est dispo \"15/04" +
                        "/2019\" à \"15:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et qu\'");
#line hidden
#line 21
    testRunner.When("on tente une planification d’entretien", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 22
    testRunner.Then("L’entretien n\'est pas planifié", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 23
    testRunner.And("aucun mail de confirmation est envoyé au candidat ou au recruteur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Recruteur ne peut pas tester le candidat car ce dernier est strictement plus expé" +
            "rimenté que le recruteur")]
        [Xunit.TraitAttribute("FeatureTitle", "Planifier un entretien de recrutement chez Soat")]
        [Xunit.TraitAttribute("Description", "Recruteur ne peut pas tester le candidat car ce dernier est strictement plus expé" +
            "rimenté que le recruteur")]
        public virtual void RecruteurNePeutPasTesterLeCandidatCarCeDernierEstStrictementPlusExperimenteQueLeRecruteur()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recruteur ne peut pas tester le candidat car ce dernier est strictement plus expé" +
                    "rimenté que le recruteur", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
    testRunner.Given("un candidat \"Java\" (\"candidat@email.com\") avec \"8\" ans d’expériences qui est disp" +
                        "onible \"16/04/2019\" à \"15:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Etant donné ");
#line hidden
#line 27
    testRunner.And("un recruteur \"Java\" (\"recruteur@soat.fr\") qui a \"6\" ans d’XP qui est dispo \"15/04" +
                        "/2019\" à \"15:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et qu\'");
#line hidden
#line 28
    testRunner.When("on tente une planification d’entretien", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 29
    testRunner.Then("L’entretien n\'est pas planifié", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 30
    testRunner.And("aucun mail de confirmation est envoyé au candidat ou au recruteur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PlanifierUnEntretienDeRecrutementChezSoatFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PlanifierUnEntretienDeRecrutementChezSoatFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
